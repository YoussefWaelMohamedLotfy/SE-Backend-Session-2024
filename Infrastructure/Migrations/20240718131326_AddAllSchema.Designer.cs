// <auto-generated />
using BackendSessionDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendSessionDemo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240718131326_AddAllSchema")]
    partial class AddAllSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendSessionDemo.CarLicense", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("OwningEmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("ValidityInMonths")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OwningEmployeeID")
                        .IsUnique();

                    b.ToTable("CarLicenses");
                });

            modelBuilder.Entity("BackendSessionDemo.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("BackendSessionDemo.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int>("WorkingDepartmentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WorkingDepartmentID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BackendSessionDemo.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<int>("WorkingEmployeesID")
                        .HasColumnType("int");

                    b.Property<int>("WorkingProjectsID")
                        .HasColumnType("int");

                    b.HasKey("WorkingEmployeesID", "WorkingProjectsID");

                    b.HasIndex("WorkingProjectsID");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("BackendSessionDemo.CarLicense", b =>
                {
                    b.HasOne("BackendSessionDemo.Employee", "OwningEmployee")
                        .WithOne("LicenseOwned")
                        .HasForeignKey("BackendSessionDemo.CarLicense", "OwningEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwningEmployee");
                });

            modelBuilder.Entity("BackendSessionDemo.Employee", b =>
                {
                    b.HasOne("BackendSessionDemo.Department", "WorkingDepartment")
                        .WithMany("WorkingEmployees")
                        .HasForeignKey("WorkingDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkingDepartment");
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("BackendSessionDemo.Employee", null)
                        .WithMany()
                        .HasForeignKey("WorkingEmployeesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendSessionDemo.Project", null)
                        .WithMany()
                        .HasForeignKey("WorkingProjectsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendSessionDemo.Department", b =>
                {
                    b.Navigation("WorkingEmployees");
                });

            modelBuilder.Entity("BackendSessionDemo.Employee", b =>
                {
                    b.Navigation("LicenseOwned")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
